scalar DateTime

enum PhotoCategory {
  SELFIE
  PORTRAIT
  ACTION
  LANDSCAPE
  GRAPHIC
}

enum SortDirection {
  ASCENDING
  DESCENDING
}

enum SortablePhotoField {
  name
  description
  category
  created
}

input PhotoFiler {
  category: PhotoCategory
  createdBetween: DateRange
  taggedUsers: [ID!]
  searchText: String
}

input DateRange {
  start: DateTime!
  end: DateTime
}

input DataPage {
  first: Int=25
  start: Int=0
}

input DataSort {
  sort: SortDirection=DESCENDING
  sortBy: SortablePhotoField=created
}


input PostPhotoInput {
  name: String!
  description: String
  category: PhotoCategory=PORTRAIT
}

type AuthPayload {
  user: User!
  token: String!
}

type User {
  githubLogin: ID!
  name: String
  avatar: string
  postedPhtos(
    filter: PhotoFilter
    paging: DataPage
    sorting: DataSort
  ): [Photo!]!
  inPhotos: [Photo!]!
}

type Photo {
  id: ID!
  name: String!
  url: String!
  description: String
  created: DateTime!
  category: PhotoCategory!
  postedBy: User!
  taggedUsers(sorting: DataSort): [User!]!
}

type Query {
  totalPhotos: Int!
  allPhotos(
    paging: DataPage
    sorting: DataSort
    filter: PhotoFilter
    ): [Photos!]!
  totalUsers: Int!
  allUsers(
    pagine: DataPage
    sorting: DataSort
    ): [User!]!

  User(githubLogin: ID!): User!
  Photos(id: ID!): Photo!
}

type Mutation {
  postPhoto(input: PostPhotoInput!): Photo!
  githubAuth(code: String!): AuthPayload!
}

type Subscription {
  newPhoto: Photo!
  newUser: User!
}

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}