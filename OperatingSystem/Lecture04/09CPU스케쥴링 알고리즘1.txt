CPU 스케쥴링:
- 멀티프로그래밍을 할 때 CPU의 사용률을 높이기 위해 어떤 프로세스를 할당할 것인지 결정하는 것.
- ready 상태의 프로세스 중에서 CPU를 할당하는 것

CPU-IO 버스트 사이클
- 프로세스 실행은 CPU 실행과 IO대기의 사이클로 구성된다.

선점/비선점 스케쥴링
- 선점: 스케쥴러가 CPU를 사용중인 프로세스를 방출할 수 있다.
- 비선점: CPU에 들어오면 끝날 때까지 기다린다.

스케쥴링이 발생하는 4가지 상황
1. 실행 -> 대기 로 전환될 때(IO, wait() 호출)
2. 실행 -> 준비 로 전환될 때(인터럽트 발생)
3. 대기 -> 준비 로 전환될 때(IO 종료)
4. 프로세스 종료

1, 4는 비선점
2, 3을 어떻게 스케쥴링 해야할 지 결정해야한다.

Dispatcher:
- 스케쥴러가 선택한 프로세스에 CPU 제어를 넘겨준다.
- 컨텍스트 스위칭을 하는 모듈.

Dispatcher Latency:
- 하나의 프로세스를 정지하고 다른 프로세스의 수행을 시작하는 데까지 소요되는 시간
- 프로세스 실행시간보다 디스패쳐의 프로세스 교체시간이 더 걸린다면 안된다.

Linux 명령어:
- vm 1 3: 1초 지연 단위로 컨텍스트 스위칭 횟수를 출력한다.
- cat /proc/2166/status: pid=2166인 프로세스에 대한 통계를 보여준다. voluntary ctxt switching, nonvoluntary ctxt switch 횟수가 나온다.

스케쥴링의 목적:
1. CPU 이용률을 높인다.
2. 처리량을 높인다. 단위시간 당 완료된 프로세스의 개수
3. 총 처리 시간을 최소화한다. 프로세스의 제출시간과 완료 시간의 간격
4. 대기 시간을 최소화한다. ready queue에서 대기한 시간을 최소로 한다.
5. 응답시간을 적게한다.

FCFS: First income, First serve.
들어온 순서대로 작업을 처리한다.

SJF: Shortest Job First.
작업시간이 짧은 순서대로 처리한다.
그러나 작업을 하기 전에 미리 작업시간을 알 수 없다.