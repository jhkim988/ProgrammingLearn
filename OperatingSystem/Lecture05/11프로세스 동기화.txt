data_integrity.c
count++, count--가 한 문장처럼 보이지만
기계어 레벨에서는 3개의 문장으로 구성된다.

register1 = count
register1 = register1 + 1
count = register1

register2 = count
register2 = register2 - 1
count = register2

세 문장 사이 중 어디서든지 context switching이 발생할 수 있다.

Race condition: 경쟁 상태
- 여러 개의 프로세스(스레드)가 공유하는 데이터에 동시에 접근/조작할 때
- 결과가 실행 순서에 따라 달라지는 것

어떤 시점에 데이터를 오직 한 프로세스만 접근 가능하게 하면 해결할 수 있다.
이를 프로세스 동기화라고 한다.

Critical Section: 임계영역
- 다른 프로세스와 공유된 데이터를 접근 하는 코드 영역
- 한 프로세스가 어떤 임계영역을 실행하고 있을 때, 다른 프로세스는 그 임계영역에 접근하지 못하게 해야한다.

코드 영역
- entry section: 임계영역으로 들어가는 부분
- critical section: 임계영역
- exit section: 임계영역에서 나오는 부분
- remainder section: 임계영역이 아닌 부분

Critical Section Problem:
- Mutual Exclusion: 상호배제 - 데드락과 기아 현상이 발생하는데 이를 예방해야한다.
- Progress: (avoid deadlock) 어떤 프로세스도 임계영역에 진입하지 못하고 대기하는 상황(데드락)이 발생해선 안된다.
- Bounded Waiting: (avoid starvation) 기아 현상이 발생해선 안된다.

임계영역에선 interrupts를 하지 않게 하는 방법
- 싱글코어에서는 효과적이지만, 멀티프로세서 환경에선 불가능하다.
- 임계영역이 길고 자주 실행된다면 멀티프로세스/멀티스레드의 장점이 사라지게 된다.

비선점형 커널에서는 race condition이 발생할 일이 없다.
선점형 커널에서 동기화 문제가 발생한다.