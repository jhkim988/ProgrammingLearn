Chapter 4. Thread and Concurrency

여태까지 single thread control 만을 다뤘다.
하나의 프로세스 자체가 multiple thread control을 다룰 수 있다.

여러 개의 프로세스를 동시에 실행할 수 있었던 이유
: CPU에 있는 PC(Program Counter)가 프로세스들의 진행상황을 기록해서
Context Switch가 일어나도 이어서 수행할 수 있도록 해준다.

Thread: light-weight process(LWP), CPU 사용의 기본단위(멀티스레딩을 지원한다면)
threadID(tid)가 CPU를 점유한다.
register set, stack, Program Counter는 Thread 별로 달라야한다.

Multi-Threading의 장점
client --(1) request--> server --(2) create new thread--> thread
                      |         |
                      --resume-->
          listening for additional client requests

여러 개의 요청이 들어와도 thread 생성 한계까지 request를 계속 받을 수 있다.
1) Responsiveness
2) Resource Sharing - easier than sheared memory or message passing.
3) Economy - cheaper than process creation, thread switching has lower overhead than context switching(PCB)
4) Scalability

Threads in Java
- fundamental model of program execution.
- 1) Inheritance from Thread class, public void run() overriding
    Java는 다중 상속이 되지 않기 때문에, Thread 클래스를 상속받으면 다른 클래스를 상속받을 수 없다.
    때문에 2번 방법을 주로 이용한다.
    >> ThreadExample1.java
- 2) Implementing the Runnable interface, public void run() overriding
    클래스를 만들어야한다. 굳이 클래스를 만들 필요가 없다면 3번 방법을 이용한다.
    >> ThreadExample2.java
- 3) Using the Lambda expression(익명 Thread)
    >> ThreadExample3.java

부모 Thread의 대기 - join(process에서는 wait, thread에서는 join이라고 한다.)
>> ThreadExample4.java

Thread의 종료 - stop() method is deprecated, use interrupt();
>> ThreadExample5.java

Multi-core System.
- 병행성 향상
- single core: thread will be interleaved overtime(시분할, CPU 스케쥴링...)
- multi core: some threads can run in parallel(동시에 실행)
- 동시에 실행하면서 문제가 많이 생긴다.

Multi-core System의 어려운 점
identifying tasks: separate task를 찾아내는 것이 중요하다.
balance: task를 균형있게 나누어서 thread에 할당한다.
data splitting
data dependency
testing and debugging

Amdahl's Law: 코어는 무조건 많을수록 좋은가?
- No