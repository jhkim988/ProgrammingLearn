프로세스: 실행중인 프로그램, 작업의 단위
프로세스가 실행되기 위해서는 자원이 필요하다. - cpu time, memory, files, I/O devices.

Storage(HDD, SSD)에 있는 a.out 파일을 메모리에 load 시킨다.
cpu가 메모리에 load 돼 있는 a.out을 fetch 하여 실행시킨다.
메모리에 load 돼 있는 상태의 프로그램을 프로세스라고 한다.

운영체제는 프로세스를 관리하는 일을 한다.

메모리 레이아웃
- 텍스트 섹션: 실행 가능한 코드
- 데이터 섹션: 전역변수
- 힙 섹션: 동적할당
- 스택 섹션: 함수 파라미터, 리턴 값, 지역변수 등

Ch3_MemoryLayout.c

프로세스의 5가지 상태 - New, Running, Waiting, Ready, Terminated

fork - 새로운 프로세스를 만드는 시스템 콜
1. New 상태로 만든다.
2. 기타 초기화 작업이 끝나면 Ready 상태가 되어 Ready Queue에 들어간다.
3. OS가 CPU 스케쥴링을 통해 프로세스를 실행하면 Running 상태가 된다.
4-a. CPU를 너무 오래 점유하면 OS가 interrupt를 주면 Ready 상태로 되돌아간다.
4-b. I/O를 하거나 이벤트를 처리하기 위해서 Waiting Queue로 들어가서 Waiting 상태가 된다. 
     I/O나 이벤트처리가 끝나면 다시 Ready 상태가 된다.(dispatch)
5. Running 상태에서 프로세스가 끝나면 Terminated 상태가 된다.

프로세스 관리
PCB(Process Control Block, TCB(Task Control Block))이라는 구조체를 만든다.
이 구조체에 프로세스가 가져야할 정보를 모두 저장한다.
PCB를 이용하여 프로세스를 조작한다.
PCB에 포함된 정보
- 프로세스 상태(New, Running, ...)
- Program Counter(실행할 명령어 주소 조작, 순차적으로 늘려서 실행하다가 goto(if, for, ...)를 만나면 점프)
- CPU Registers(IR, DR, Program counter, ...)
- CPU Scheduling info.
- Memory management info.
- Accounting info.
- I/O status info.

프로세스는 Single Thread of Execution
- PCB를 교체함으로써 다른 프로세스를 실행할 수 있다.

Multi-Processing(tasking): Multiple Threads of Excecution
하나의 프로세스 내부에서도 여러 개의 Threads를 실행하고 싶다면?

thread: light-weight process(ch.4)
여러 개의 프로세스를 이용하는 것보다 여러 개의 스레드를 이용하는 것이 장점이 더 많다.

multi-programming의 목적
- 동시에 여러 개의 프로세스를 실행한다.
- CPU 사용률을 최대화한다.

time sharing의 목적
- 프로세스간에 CPU core/process를 빈번하게 교체해서 사용자 입장에선 동시에 실행하고 있는 것처럼 생각되게 한다.

Scheduling Queue
: 프로세스가 대기열(Ready Queue)에서 대기하고 있다가, 순서대로 CPU를 할당받는다.(Running 상태)
time sharing에서 time이 끝나면 다시 ready queue로 들어가면 된다.
running 상태에서 waiting 상태로 바뀔 때(I/O completion)는 waiting queue로 들어간다. I/O가 끝나면 다시 Ready Queue로 들어간다.
실제 구현은 Linked lists of PCBs로 한다.
waiting queue는 여러 개가 있을 수 있다.(device가 여러 개라면)

Queueing Diagram

Context Switch
- Process가 사용되고 있는 상태를 Context라고 한다.
- Context의 정보는 PCB에 저장돼 있다.
- 현재 프로세스의 상태(PCB)를 저장하고 다음 프로세스의 상태(PCB)를 복원하는 것을 Context Switch라고 한다.

프로세스 생성/종료
프로세스가 새로운 프로세스를 생성한다.
프로세스를 만드는 프로세스 - parent process
만들어진 프로세스 - child process
fork()라는 시스템 콜을 이용하여 프로세스를 만들 수 있다.
tree of process

실행 측면에서 두 가지 방법
1. parent process와 child process가 동시에 실행되는 방법
2. parent process는 waiting 상태가 되고, child process가 terminated 될 때 다시 실행되는 방법

address-space 측면에서 두 가지 방법
1. child process가 parent process와 같은 일을 하는 프로세스라면(text section이 같다면), 굳이 새로운 프로세스를 만들 필요가 없다.(PCB만 새로 만들면 된다.)
2. 새로운 프로그램을 load하는 방법

Ch3_OperationOfProcess.c

Zombie and Orphan
zombie process: parent 프로세스가 wait를 호출하지 않고 child 프로세스가 종료된 상태
orphan process: parent 프로세스가 wait를 호출하지 않고 종료됐다면 child 프로세스가 고아가 된다.
daemon process, background process를 만들 때 활용한다.

UNIX-like O/S에서 새로운 프로세스는 fork() 시스템 콜을 통해 생성된다.
child process는 copy of address space로 만든다.
parent process와 child process는 fork() system call 이후의 instruction을 실행한다.
차이점은 fork()를 했을 때 return code가 0이면 child process이고, 0이 아니면(OS kernel이 부여한 pid를 리턴해주면) parent process이다.

