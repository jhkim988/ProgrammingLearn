프로세스의 동시 실행은 두 가지로 나눌 수 있다.
- 독립적인 프로세스들의 실행(independent)
- 협업하는 프로세스들의 실행(cooperating)

프로세스가 독립적
- 공유하는 데이터가 없다.

프로세스끼리 협업
- 프로세스간에 영향을 주고 받는다. 데이터나 메세지를 공유하고 주고 받는다.

ICP: Inter-Process Communication
- 프로세스 간에 데이터를 주고 받는다.

ICP의 두 가지 모델
- shared memory(공유메모리)를 이용하는 방법
- message passing, 메세지를 주고 받는 방법(운영체제에게 맞긴다. message queue를 이용한다.)

Shared Memory Systems
- Producer-Consumer Problem
producer: 정보를 생산
consumer: 정보를 소비
Ex) 컴파일러가 C 코드를 컴파일하여 어셈블리 코드를 생성, 어셈블러는 어셈블리 코드로 기계어를 생성한다.
Ex) 웹서버에서, 브라우저가 request를 하면 웹서버가 html 파일을 전송한다.
버퍼를 이용하여 producer는 버퍼에 전송할 정보를 채우고, consumer는 버퍼에서 정보를 가져온다.
bounded buffer에서 버퍼가 가득 차면 producer는 wait 상태로 바꿔야한다.
버퍼가 비어있으면 consumer는 wait상태로 바꿔야된다.
Shared Memory: producer와 consumer가 공유하고 있는 메모리
>> Ch3_SharedMemory.c

Shared Memory 방식의 단점
- application programmer가 shared memory를 직접(명시적으로) 조작해야한다.
- shared memeory를 사용하는 복잡한 내용들을 OS가 알아서 처리하는 Message-Passing 방식이 유용하다

Message-Passing facility
- 두 개의 연산: send(message), receive(message)
- send, receive 시스템 콜로 OS가 알아서 처리
>> Ch3_Message-Passing.c
- prosumer(producer + consumer)끼리 통신하는 경우, 단순한 message-passing 방식으로는 어려울 수 있다.
Communication link의 방법
- direct or indirect
    - direct: 명시적으로 recipient, sender를 기술한다.
        send(P, message); // P에게 message를 보낸다.
        receive(Q, message); // Q로부터 message를 받는다.
        comm. link가 automatically하게 생성된다.
        이 comm. link는 정확히 두 개의 프로세스와 연관돼 있다.
        한 쌍의 프로세스들 사이에 정확히 한 개의 comm. link가 존재한다.
    - indirect: 중간에 매개체를 거쳐서 message를 보낸다.
        mailboxes(or ports)를 통해 message를 주고 받는다.
        mailboxes는 메세지를 보내고 받는 오브젝트이다.
        send(A, message); // mailbox A에 message를 보낸다.
        receive(A, message); // mailbox A에서 message를 받는다.
        두 프로세스가 같은 mailbox를 사용할 때만 comm. link가 생성된다.
        두 개보다 많은 프로세스와 comm. link가 연결될 수 있다.
        각각의 프로세스 쌍에 대해 여러 개의 다른 링크들이 존재할 수 있다.
        OS는 새로운 mailbox를 생성/삭제하고, mailbox를 통해 send, receive를 할 수 있게 한다. 
        
        Blocking I/O와 Non-Blocking I/O - synchronous, asynchronous
        Blocking I/O: recipient가 message를 받을 때까지 sender가 blocked 된다.
            (분할된) message를 받고 sender가 message를 보낼 때까지 대기한다. 
        Non-Blocking I/O: message를 보내놓고(OS에 맡겨놓고) sender가 작업을 계속 진행한다.
            (분할된) message를 받고 sender가 추가 message를 보내길 기다리면서 작업을 이어서 한다.

- synchronous or asynchronous
- automatic or explicit buffering

